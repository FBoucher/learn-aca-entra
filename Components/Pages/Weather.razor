@page "/weather"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inherits OwningComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider


@* @attribute [StreamRendering] *@
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>claims</h4>

@if (authState != null)
{
    <p>authState not null</p>
    <p>Count of claims: @authState.User.Claims.Count()</p>
    <p>Count of identities: @authState.User.Identities.Count()</p>
    <p>IsAuthenticated: @(authState.User.Identity!.IsAuthenticated)</p>
	<p>Name: @authState.User.Identity!.Name</p>
    <p>Message: @authMessage</p>

    <ul>
        @foreach (var claim in authState.User.Claims)
        {
            <li><strong>Type:</strong> @claim.Type <br /><strong>Value:</strong> @claim.Value</li>
        }
    </ul>
}
else
{
    <p>Loading...</p>
}
<hr/>
<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>
@if (claims.Any())
{
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}
<p>@surname</p>


@code {
    private WeatherForecast[]? forecasts;
    private AuthenticationState authState;
    private AuthHelperService? myService { get; set; }
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string? authMessage;
    private string? surname;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        myService = ScopedServices.GetRequiredService<AuthHelperService>();
        authMessage = await myService.CheckAuthStatus(AuthenticationStateProvider);
        
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surname = user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value;
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}
